#!/usr/bin/env ruby

# Description: Scans for common HTTP vulnerabilities including XSS, SQLi, and open directories
# Author: dorazombiiee

require 'net/http'
require 'uri'
require 'openssl'

class HttpVulnerabilityScanner
  def initialize
    @user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
    @timeout = 10
    @xss_payloads = [
      "<script>alert(1)</script>",
      "<img src=x onerror=alert(1)>",
      "';alert(1);//"
    ]
    @sqli_payloads = [
      "' OR '1'='1",
      "1' OR '1'='1' --",
      "' UNION SELECT 1,2,3 --"
    ]
    @path_traversal_payloads = [
      "../../../etc/passwd",
      "..\\..\\..\\windows\\win.ini",
      "/etc/passwd"
    ]
    @common_directories = [
      "/admin/",
      "/backup/",
      "/config/",
      "/db/",
      "/logs/",
      "/.git/",
      "/.env"
    ]
  end
  
  def run(target, open_ports, options)
    results = {
      target: target,
      timestamp: Time.now.to_s,
      vulnerabilities: []
    }
    
    # Only scan web ports
    web_ports = open_ports.select { |port| [80, 443, 8080, 8443].include?(port) }
    
    if web_ports.empty?
      puts "[-] No web ports found to scan".red
      return results
    end
    
    web_ports.each do |port|
      protocol = port == 443 || port == 8443 ? "https" : "http"
      base_url = "#{protocol}://#{target}:#{port}"
      
      begin
        puts "[*] Scanning #{base_url} for vulnerabilities...".blue
        
        # Check if web server is running
        response = http_request(base_url)
        
        if response
          server = response['Server']
          puts "[+] Web server detected: #{server || 'Unknown'}".green
          
          # Run vulnerability checks
          check_xss(base_url, results)
          check_sqli(base_url, results)
          check_path_traversal(base_url, results)
          check_open_directories(base_url, results)
          
          # Run pentest specific checks if in pentest mode
          if options[:pentest]
            check_default_credentials(base_url, results)
            check_missing_headers(base_url, response, results)
          end
        else
          puts "[-] Could not connect to web server on port #{port}".red
        end
      rescue => e
        puts "[-] Error scanning #{base_url}: #{e.message}".red
      end
    end
    
    puts "[+] HTTP vulnerability scan complete. Found #{results[:vulnerabilities].length} potential vulnerabilities.".green
    results
  end
  
  private
  
  def http_request(url, params = {}, method = :get)
    uri = URI(url)
    
    http = Net::HTTP.new(uri.host, uri.port)
    http.open_timeout = @timeout
    http.read_timeout = @timeout
    
    if uri.scheme == 'https'
      http.use_ssl = true
      http.verify_mode = OpenSSL::SSL::VERIFY_NONE
    end
    
    case method
    when :get
      if params.empty?
        request = Net::HTTP::Get.new(uri.request_uri)
      else
        query = URI.encode_www_form(params)
        request = Net::HTTP::Get.new("#{uri.request_uri}?#{query}")
      end
    when :post
      request = Net::HTTP::Post.new(uri.request_uri)
      request.set_form_data(params)
    end
    
    request['User-Agent'] = @user_agent
    
    begin
      http.request(request)
    rescue => e
      puts "  [-] HTTP request error: #{e.message}".red
      nil
    end
  end
  
  def check_xss(base_url, results)
    puts "  [*] Checking for XSS vulnerabilities...".blue
    
    # Common parameters to test
    parameters = ['q', 'search', 'id', 'page', 'name']
    
    parameters.each do |param|
      @xss_payloads.each do |payload|
        url = "#{base_url}/index.php"
        response = http_request(url, {param => payload})
        
        if response && response.body.include?(payload)
          results[:vulnerabilities] << {
            type: 'XSS',
            url: url,
            parameter: param,
            payload: payload,
            severity: 'High'
          }
          
          puts "  [+] Potential XSS vulnerability found in parameter '#{param}'".green
          break
        end
      end
    end
  end
  
  def check_sqli(base_url, results)
    puts "  [*] Checking for SQL Injection vulnerabilities...".blue
    
    # Common parameters to test
    parameters = ['id', 'user_id', 'product_id', 'page_id', 'item']
    
    parameters.each do |param|
      @sqli_payloads.each do |payload|
        url = "#{base_url}/index.php"
        response = http_request(url, {param => payload})
        
        if response && (response.body.include?('SQL syntax') || 
                       response.body.include?('mysql_fetch') || 
                       response.body.include?('ORA-') ||
                       response.body.include?('syntax error'))
          results[:vulnerabilities] << {
            type: 'SQL Injection',
            url: url,
            parameter: param,
            payload: payload,
            severity: 'Critical'
          }
          
          puts "  [+] Potential SQL Injection vulnerability found in parameter '#{param}'".green
          break
        end
      end
    end
  end
  
  def check_path_traversal(base_url, results)
    puts "  [*] Checking for Path Traversal vulnerabilities...".blue
    
    # Common parameters to test
    parameters = ['file', 'page', 'include', 'path', 'document']
    
    parameters.each do |param|
      @path_traversal_payloads.each do |payload|
        url = "#{base_url}/index.php"
        response = http_request(url, {param => payload})
        
        if response && (response.body.include?('root:') || 
                       response.body.include?('[boot loader]') ||
                       response.body.include?('for 16-bit app support'))
          results[:vulnerabilities] << {
            type: 'Path Traversal',
            url: url,
            parameter: param,
            payload: payload,
            severity: 'High'
          }
          
          puts "  [+] Potential Path Traversal vulnerability found in parameter '#{param}'".green
          break
        end
      end
    end
  end
  
  def check_open_directories(base_url, results)
    puts "  [*] Checking for Open Directory vulnerabilities...".blue
    
    @common_directories.each do |directory|
      url = "#{base_url}#{directory}"
      response = http_request(url)
      
      if response && response.code == '200' && 
         (response.body.include?('Index of') || 
          response.body.include?('Directory Listing'))
        results[:vulnerabilities] << {
          type: 'Open Directory',
          url: url,
          severity: 'Medium'
        }
        
        puts "  [+] Open Directory found: #{url}".green
      end
    end
  end
  
  def check_default_credentials(base_url, results)
    puts "  [*] Checking for default credentials...".blue
    
    # Common admin paths and default credentials
    admin_paths = [
      {path: '/admin/', userfield: 'username', passfield: 'password', credentials: [['admin', 'admin'], ['admin', 'password123']]},
      {path: '/wp-login.php', userfield: 'log', passfield: 'pwd', credentials: [['admin', 'admin'], ['admin', 'password']]},
      {path: '/phpmyadmin/', userfield: 'pma_username', passfield: 'pma_password', credentials: [['root', ''], ['admin', 'admin']]}
    ]
    
    admin_paths.each do |admin|
      url = "#{base_url}#{admin[:path]}"
      response = http_request(url)
      
      if response && response.code == '200'
        admin[:credentials].each do |creds|
          username, password = creds
          
          post_response = http_request(
            url, 
            {admin[:userfield] => username, admin[:passfield] => password}, 
            :post
          )
          
          # Basic check for successful login
          if post_response && post_response.code == '302' || 
             (post_response && !post_response.body.include?('incorrect') && 
              !post_response.body.include?('invalid') && 
              !post_response.body.include?('error'))
            results[:vulnerabilities] << {
              type: 'Default Credentials',
              url: url,
              username: username,
              password: password,
              severity: 'Critical'
            }
            
            puts "  [+] Potentially valid credentials found: #{url} - #{username}:#{password}".green
            break
          end
        end
      end
    end
  end
  
  def check_missing_headers(base_url, response, results)
    puts "  [*] Checking for missing security headers...".blue
    
    security_headers = {
      'X-Frame-Options' => 'Missing X-Frame-Options header can lead to clickjacking',
      'X-XSS-Protection' => 'Missing X-XSS-Protection header can increase XSS risk',
      'Content-Security-Policy' => 'Missing Content-Security-Policy increases risk of attacks',
      'X-Content-Type-Options' => 'Missing X-Content-Type-Options allows MIME-sniffing',
      'Strict-Transport-Security' => 'Missing HSTS header on HTTPS connection'
    }
    
    missing_headers = []
    
    security_headers.each do |header, description|
      if !response[header]
        missing_headers << {
          header: header,
          description: description
        }
      end
    end
    
    unless missing_headers.empty?
      results[:vulnerabilities] << {
        type: 'Missing Security Headers',
        url: base_url,
        missing_headers: missing_headers,
        severity: 'Medium'
      }
      
      puts "  [+] Missing security headers detected: #{missing_headers.map {|h| h[:header]}.join(', ')}".green
    end
  end
end
